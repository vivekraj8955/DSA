#include <bits/stdc++.h>
using namespace std;
vector<int> arr;
class Seg
{
    vector<int> tree;
    vector<int>lazy;

public:
    Seg(int n)
    {
        tree.resize(4 * n + 1);
        lazy.resize(4 * n + 1,0);
    }
    void build(int node, int start, int end)
    {
        if (start == end)
        {
            tree[node] = arr[start];
            return;
        }
        int mid = (start + end) / 2;
        build(node * 2 + 1, start, mid);
        build(node * 2 + 2, mid + 1, end);
        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
    }
    int query(int node, int start, int end, int l, int r)
    {
        if(lazy[node]!=0)
        {
            tree[node]+=(end-start+1)*lazy[node];
            if(start!=end)
            {
            lazy[node*2+1]=lazy[node];
            lazy[node*2+2]=lazy[node];
            }
            lazy[node]=0;
        }
        if(l>end||r<start) return 0 ;

        if(l<=start&&r>=end)
        {
            return tree[node];
        }

        int mid=(start+end)/2;
         return query(node*2+1,start,mid,l,r)+query(node*2+2,mid+1,end,l,r);
    }
    void update(int node, int start, int end, int ind, int val)
    {
        if (start == end)
        {
            tree[node] += val;
            arr[ind]+=val;
            return ;
        }
        int mid=(start+end)/2;
        if(ind<=mid) 
        update(node*2+1,start,mid,ind,val);
        else
        update(node*2+2,mid+1,end,ind,val);
        tree[node] = tree[2 * node + 1]+ tree[2 * node + 2];
    }
    void rangeupdate(int node,int start,int end,int l,int r,int val)
    {
        if(lazy[node]!=0)
        {
            tree[node]+=(end-start+1)*lazy[node];
            if(start!=end)
            {
            lazy[node*2+1]=lazy[node];
            lazy[node*2+2]=lazy[node];
            }
            lazy[node]=0;
        }
        if(l>end||r<start) return ;

        if(l<=start&&r>=end)
        {
            tree[node]+=(end-start+1)*val;
            if(start!=end)
            {
                 tree[node*2+1]+=val;
                 tree[node*2+2]+=val;
            }
            return;
        }

        int mid=(start+end)/2;
        rangeupdate(node*2+1,start,mid,l,r,val);
        rangeupdate(node*2+2,mid+1,end,l,r,val);
        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
    }
};
int main()
{
          
}
