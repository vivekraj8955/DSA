#include <bits/stdc++.h>
using namespace std;
vector<int> arr;
class Seg
{
    vector<int> tree;

public:
    Seg(int n)
    {
        tree.resize(4 * n + 1);
    }
    void build(int node, int start, int end)
    {
        if (start == end)
        {
            tree[node] = arr[start];
            return;
        }
        int mid = (start + end) / 2;
        build(node * 2 + 1, start, mid);
        build(node * 2 + 2, mid + 1, end);
        tree[node] = min(tree[2 * node + 1], tree[2 * node + 2]);
    }
    int query(int node, int start, int end, int l, int r)
    {
        if (l <= start && r >= end)
        {
            return tree[node];
        }
        else if (l > end || r < start)
            return 1e9;
        int mid = (start + end) / 2;
        int left = query(node * 2 + 1, start, mid, l, r);
        int right = query(node * 2 + 2, mid + 1, end, l, r);
        return min(left, right);
    }
    void update(int node, int start, int end, int ind, int val)
    {
        if (start == end)
        {
            tree[node] = val;
            return ;
        }
        int mid=(start+end)/2;
        if(ind<=mid) 
        update(node*2+1,start,mid,ind,val);
        else
        update(node*2+2,mid+1,end,ind,val);
        tree[node] = min(tree[2 * node + 1], tree[2 * node + 2]);
    }
};
int main()
{
    
}
